name: CI
on:
  pull_request:
  schedule:
    - cron: "0 6 * * *"

jobs:
  mmo:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version:
          - "3.6"
          - "3.8"
        mongodb_version:
          - "4.0"
          - "4.2"
          - "4.4"
        ansible_version:
          - stable-2.10
    steps:

    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python_version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python_version }}

    - name: Install ansible-base (${{ matrix.ansible_version }})
      run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible_version }}.tar.gz --disable-pip-version-check

    - name: Install community.mongodb
      run: ansible-galaxy collection install community.mongodb

    - name: Create playbook to install repo for MongoDB ${{ matrix.ansible_version }}
      run: |
         cat << EOF > /tmp/mongodb.yml
            - hosts: servers
              roles:
                - { role: community.mongodb.mongodb_repository, mongodb_version: "${{ matrix.mongodb_version }}" }
         EOF

    - name: Execute playbook
      run: ansible-playbook -c local --become /tmp/mongodb.yml

    - name: Install the mongodb package
      run: sudo apt install mongodb-org

    # Deprecated
    #- name: Setup a MongoB Sharded Cluster
    #  run: |
    #    source bash/mmo_mongodb_cluster.sh;
    #    mmo_setup_cluster;

    - name: Install mtools
      run: pip install --user mtools[all]

    - name: Add mtools location to path
      run: echo "/home/runner/.local/bin" >> $GITHUB_PATH

    - name: Setup a MongoDB Sharded Cluster
      run: mlaunch --replicaset --sharded shard01 shard02 shard03 --auth --username admin --password admin

    #- name: Debug
    #  run: cat data/.mlaunch_startup
    - name: Install wheel
      run: pip install wheel

    - name: Build and install the mm python app
      run: python setup.py bdist_wheel && python -m pip install dist/mongodbmanager-*-py3-none-any.whl
      working-directory: python


    - name: Run mm command and get output from summary cmd
      id: mm0
      run: |
        output=$(mm -D admin -u admin -p admin --summary)
        echo "$output"
        output="${output//'%'/'%25'}"
        output="${output//$'\n'/'%0A'}"
        output="${output//$'\r'/'%0D'}"
        echo "::set-output name=mm::$output"

    - name: Validate output of the summary command 1
      uses: nick-invision/assert-action@v1
      with:
        expected: "MongoDB Config Servers"
        actual: ${{ steps.mm0.outputs.mm }}
        comparison: Contains

    - name: Validate output of the summary command 2
      uses: nick-invision/assert-action@v1
      with:
        expected: "MongoDB mongos servers"
        actual: ${{ steps.mm0.outputs.mm }}
        comparison: Contains

    - name: Validate output of the summary command 3
      uses: nick-invision/assert-action@v1
      with:
        expected: "MongoDB mongod shard servers"
        actual: ${{ steps.mm0.outputs.mm }}
        comparison: Contains

    - name: Validate output of the summary command 3
      uses: nick-invision/assert-action@v1
      with:
        expected: "MongoDB shards"
        actual: ${{ steps.mm0.outputs.mm }}
        comparison: Contains

    - name: Validate output of the summary command 3
      uses: nick-invision/assert-action@v1
      with:
        expected: "shard01"
        actual: ${{ steps.mm0.outputs.mm }}
        comparison: Contains

    - name: Validate output of the summary command 3
      uses: nick-invision/assert-action@v1
      with:
        expected: "shard02"
        actual: ${{ steps.mm0.outputs.mm }}
        comparison: Contains

    - name: Validate output of the summary command 3
      uses: nick-invision/assert-action@v1
      with:
        expected: "shard03"
        actual: ${{ steps.mm0.outputs.mm }}
        comparison: Contains

    - name: Run mm command and get output from repl cmd
      id: mm
      run: |
        output=$(mm -D admin -u admin -p admin --repl)
        echo "$output"
        output="${output//'%'/'%25'}"
        output="${output//$'\n'/'%0A'}"
        output="${output//$'\r'/'%0D'}"
        echo "::set-output name=mm::$output"

    - name: Validate output of the repl command shard01
      uses: nick-invision/assert-action@v1
      with:
        expected: shard01
        actual: ${{ steps.mm.outputs.mm }}
        comparison: Contains

    - name: Validate output of the repl command shard02
      uses: nick-invision/assert-action@v1
      with:
        expected: shard02
        actual: ${{ steps.mm.outputs.mm }}
        comparison: Contains

    - name: Validate output of the repl command shard03
      uses: nick-invision/assert-action@v1
      with:
        expected: shard03
        actual: ${{ steps.mm.outputs.mm }}
        comparison: Contains

    - name: Validate output of the repl command shard001
      uses: nick-invision/assert-action@v1
      with:
        expected: configRepl
        actual: ${{ steps.mm.outputs.mm }}
        comparison: Contains

    - name: Validate output of the repl command PRIMARY
      uses: nick-invision/assert-action@v1
      with:
        expected: PRIMARY
        actual: ${{ steps.mm.outputs.mm }}
        comparison: Contains

    - name: Validate output of the repl command SECONDARY
      uses: nick-invision/assert-action@v1
      with:
        expected: SECONDARY
        actual: ${{ steps.mm.outputs.mm }}
        comparison: Contains

    - name: Run mm command and get output from summary cmd
      id: mm2
      run: |
        output=$(mm -D admin -u admin -p admin --summary)
        echo "$output"
        output="${output//'%'/'%25'}"
        output="${output//$'\n'/'%0A'}"
        output="${output//$'\r'/'%0D'}"
        echo "::set-output name=mm::$output"

    - name: Validate output of the summary command 1
      uses: nick-invision/assert-action@v1
      with:
        expected: "MongoDB Config Servers"
        actual: ${{ steps.mm2.outputs.mm }}
        comparison: Contains

    - name: Validate output of the summary command 2
      uses: nick-invision/assert-action@v1
      with:
        expected: "MongoDB mongos servers"
        actual: ${{ steps.mm2.outputs.mm }}
        comparison: Contains

    - name: Validate output of the summary command 3
      uses: nick-invision/assert-action@v1
      with:
        expected: "MongoDB mongod shard servers"
        actual: ${{ steps.mm2.outputs.mm }}
        comparison: Contains

    - name: Validate output of the summary command 3
      uses: nick-invision/assert-action@v1
      with:
        expected: "MongoDB shards"
        actual: ${{ steps.mm2.outputs.mm }}
        comparison: Contains

    - name: Validate output of the summary command 4
      uses: nick-invision/assert-action@v1
      with:
        expected: "shard01"
        actual: ${{ steps.mm2.outputs.mm }}
        comparison: Contains

    - name: Validate output of the summary command 5
      uses: nick-invision/assert-action@v1
      with:
        expected: "shard02"
        actual: ${{ steps.mm2.outputs.mm }}
        comparison: Contains

    - name: Validate output of the summary command 5
      uses: nick-invision/assert-action@v1
      with:
        expected: "shard03"
        actual: ${{ steps.mm2.outputs.mm }}
        comparison: Contains

    - name: Run mm command and get output from server_status instance cmd
      id: mm3
      run: |
        output=$(mm -D admin -u admin -p admin --server_status instance)
        echo "$output"
        output="${output//'%'/'%25'}"
        output="${output//$'\n'/'%0A'}"
        output="${output//$'\r'/'%0D'}"
        echo "::set-output name=mm::$output"

    - name: Validate output of the server_status command 1
      uses: nick-invision/assert-action@v1
      with:
        expected: "mongod"
        actual: ${{ steps.mm3.outputs.mm }}
        comparison: Contains

    - name: Validate output of the server_status command 2
      uses: nick-invision/assert-action@v1
      with:
        expected: "pid"
        actual: ${{ steps.mm3.outputs.mm }}
        comparison: Contains

    - name: Validate output of the server_status command 3
      uses: nick-invision/assert-action@v1
      with:
        expected: "uptime"
        actual: ${{ steps.mm3.outputs.mm }}
        comparison: Contains

    - name: Run mm command and get output from host_info os cmd
      id: mm4
      run: |
        output=$(mm -D admin -u admin -p admin --host_info os)
        echo "$output"
        output="${output//'%'/'%25'}"
        output="${output//$'\n'/'%0A'}"
        output="${output//$'\r'/'%0D'}"
        echo "::set-output name=mm::$output"

    - name: Validate output of the host_info command 1
      uses: nick-invision/assert-action@v1
      with:
        expected: "Linux Ubuntu"
        actual: ${{ steps.mm4.outputs.mm }}
        comparison: Contains

    - name: Validate output of the host_info command 2
      uses: nick-invision/assert-action@v1
      with:
        expected: "shard03"
        actual: ${{ steps.mm4.outputs.mm }}
        comparison: Contains

    - name: Run mm command with step_down
      id: mm5
      run: |
        mm -D admin -u admin -p admin --step_down shard01

    - name: Run mm command and get output from repl cmd with repeat
      id: mm6
      run: |
        mm -D admin -u admin -p admin --repl --repeat 5 > output2.log 2>&1
        output=$(cat output2.log)
        echo "$output"
        output="${output//'%'/'%25'}"
        output="${output//$'\n'/'%0A'}"
        output="${output//$'\r'/'%0D'}"
        echo "::set-output name=mm::$output"

    - name: Validate output of the repl cmd with repeat 1
      uses: nick-invision/assert-action@v1
      with:
        expected: "in the cluster state since the last check"
        actual: ${{ steps.mm6.outputs.mm }}
        comparison: Contains

    - name: Validate output of the repl cmd with repeat 2
      uses: nick-invision/assert-action@v1
      with:
        expected: "There have been no state changes in the cluster since the last check"
        actual: ${{ steps.mm6.outputs.mm }}
        comparison: Contains

    - name: Run mm cmd with db_hashes flag
      id: mm7
      run: |
          output=$(mm -D admin -u admin -p admin --db_hashes)
          echo "$output"
          output="${output//'%'/'%25'}"
          output="${output//$'\n'/'%0A'}"
          output="${output//$'\r'/'%0D'}"
          echo "::set-output name=mm::$output"

    - name: Validate output of the db_hashes cmd 1
      uses: nick-invision/assert-action@v1
      with:
        expected: "md5"
        actual: ${{ steps.mm7.outputs.mm }}
        comparison: Contains

    - name: Validate output of the db_hashes cmd 2
      uses: nick-invision/assert-action@v1
      with:
        expected: "admin"
        actual: ${{ steps.mm7.outputs.mm }}
        comparison: Contains

    - name: Run mm cmd with databases flag
      id: mm8
      run: |
          output=$(mm -D admin -u admin -p admin --databases)
          echo "$output"
          output="${output//'%'/'%25'}"
          output="${output//$'\n'/'%0A'}"
          output="${output//$'\r'/'%0D'}"
          echo "::set-output name=mm::$output"

    - name: Validate output of the databases cmd 1
      uses: nick-invision/assert-action@v1
      with:
        expected: "admin"
        actual: ${{ steps.mm8.outputs.mm }}
        comparison: Contains

    - name: Validate output of the databases cmd 2
      uses: nick-invision/assert-action@v1
      with:
        expected: "config"
        actual: ${{ steps.mm8.outputs.mm }}
        comparison: Contains

    - name: Validate output of the databases cmd 3
      uses: nick-invision/assert-action@v1
      with:
        expected: "local"
        actual: ${{ steps.mm8.outputs.mm }}
        comparison: Contains

#    - name: Test step_down nominate host command
#      id: mm9
#      run: |
#          output=$(mm -D admin -u admin -p admin --step_down_nominate_host localhost --step_down_nominate_port 27026 --step_down shard03)
#          echo "$output"
#          output="${output//'%'/'%25'}"
#          output="${output//$'\n'/'%0A'}"
#          output="${output//$'\r'/'%0D'}"
#          sleep 10
#          output="$(echo $output | grep 27026)"
#          echo "::set-output name=mm::$output"

#    - name: Validate that host with port 27026 is now primary
#      uses: nick-invision/assert-action@v1
#      with:
#        expected: "localhost:27026  shard03     PRIMARY"
#        actual: ${{ steps.mm9.outputs.mm }}
#        comparison: Contains

    - name: Test profiling 1
      id: profiling1
      run: |
          output=$(mm -D admin -u admin -p admin --profiling 1 --database test --slowms 200)
          echo "$output"
          output="${output//'%'/'%25'}"
          output="${output//$'\n'/'%0A'}"
          output="${output//$'\r'/'%0D'}"
          echo "::set-output name=mm::$output"

    - name: Validate that profiling output looks correct 1
      uses: nick-invision/assert-action@v1
      with:
        expected: "test  1        200"
        actual: ${{ steps.profiling1.outputs.mm }}
        comparison: Contains

    - name: Test profiling 2
      id: profiling2
      run: |
          output=$(mm -D admin -u admin -p admin --profiling 0 --database test)
          echo "$output"
          output="${output//'%'/'%25'}"
          output="${output//$'\n'/'%0A'}"
          output="${output//$'\r'/'%0D'}"
          echo "::set-output name=mm::$output"

    - name: Validate that profiling output looks correct 1
      uses: nick-invision/assert-action@v1
      with:
        expected: "test  0        200"
        actual: ${{ steps.profiling2.outputs.mm }}
        comparison: Contains

    - name: Debug step
      run: netstat -tulpen

    - name: Ensure hostname resolves to localhost
      run: echo "127.0.0.1 $(hostname)" | sudo tee -a /etc/hosts

    - name: Test collection stats 1
      id: collection1
      run: |
          output=$(mm -D admin -u admin -p admin --collection_stats config.chunks)
          echo "$output"
          output="${output//'%'/'%25'}"
          output="${output//$'\n'/'%0A'}"
          output="${output//$'\r'/'%0D'}"
          echo "::set-output name=mm::$output"

    - name: Validate collection stats 1
      uses: nick-invision/assert-action@v1
      with:
        expected: "sharded   capped   count      size (mb)  storageSize (mb) IndexSize (mb)"
        actual: ${{ steps.collection1.outputs.mm }}
        comparison: Contains

    - name: Validate collection stats 2
      uses: nick-invision/assert-action@v1
      with:
        expected: "ns_1_shard_1_min_1"
        actual: ${{ steps.collection1.outputs.mm }}
        comparison: Contains

    - name: Test database stats 1
      id: database1
      run: |
          output=$(mm -D admin -u admin -p admin --database_stats config)
          echo "$output"
          output="${output//'%'/'%25'}"
          output="${output//$'\n'/'%0A'}"
          output="${output//$'\r'/'%0D'}"
          echo "::set-output name=mm::$output"

    - name: Validate database stats 1
      uses: nick-invision/assert-action@v1
      with:
        expected: "Database stats summary of config"
        actual: ${{ steps.database1.outputs.mm }}
        comparison: Contains

    - name: Validate database stats 2
      uses: nick-invision/assert-action@v1
      with:
        expected: "shard03/"
        actual: ${{ steps.database1.outputs.mm }}
        comparison: Contains

    - name: Test a cmd with --inc_mongos flag 1
      id: inc1
      run: |
          output=$(mm -D admin -u admin -p admin --server_status instance --inc_mongos)
          echo "$output"
          output="${output//'%'/'%25'}"
          output="${output//$'\n'/'%0A'}"
          output="${output//$'\r'/'%0D'}"
          echo "::set-output name=mm::$output"

    - name: Validate cmd with --inc_mongos flag 1
      uses: nick-invision/assert-action@v1
      with:
        expected: "mongos"
        actual: ${{ steps.inc1.outputs.mm }}
        comparison: Contains

    - name: Test a cmd with --inc_mongos flag 2
      id: inc2
      run: |
          output=$(mm -D admin -u admin -p admin --server_status asserts --inc_mongos)
          echo "$output"
          output="${output//'%'/'%25'}"
          output="${output//$'\n'/'%0A'}"
          output="${output//$'\r'/'%0D'}"
          echo "::set-output name=mm::$output"

    - name: Validate cmd with --inc_mongos flag 2
      uses: nick-invision/assert-action@v1
      with:
        expected: "27017"  # mongos port
        actual: ${{ steps.inc2.outputs.mm }}
        comparison: Contains

    - name: Test a cmd with --repeat and --interval flags
      id: repeat1
      run: |
          output=$(mm -D admin -u admin -p admin -server_status opcounters --repeat 5 --interval 1 --stacktrace >> repeat.txt 2>&1)
          output=$(cat repeat.txt")
          echo $output
          echo "::set-output name=mm::$output"

    - name: Validate repeat output
      uses: nick-invision/assert-action@v1
      with:
        expected: "insert  query  update  delete  getmore  command"
        actual: ${{ steps.repeat1.outputs.mm }}
        comparison: Contains
